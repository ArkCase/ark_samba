#!/bin/bash

set -euo pipefail
. /.functions

DEBUG="$(to_boolean "${DEBUG:-false}")"

${DEBUG} && set -x

set_or_default BASE_DIR "/app"
set_or_default INIT_DIR "${BASE_DIR}/init"
set_or_default CONF_DIR "${BASE_DIR}/conf"
set_or_default BOOT_DIR "${BASE_DIR}/boot"
set_or_default BACKEND_STORE_SIZE_GB "8"
set_or_default LOG_ARCHIVE_COUNT "10"

[[ "${BACKEND_STORE_SIZE_GB}" =~ ^[1-9][0-9]*$ ]] || fail "The value for BACKEND_STORE_SIZE_GB is not a valid number: [${BACKEND_STORE_SIZE_GB}]"

SMB_CONF="/etc/samba/smb.conf"
KRB_CONF="/etc/krb5.conf"

set_or_default SAMBA_STATE "/var/lib/samba"
SAMBA_PRIVATE="${SAMBA_STATE}/private"

#
# Set and normalize variables
#
DOMAINPASS="${DOMAINPASS:-youshouldsetapassword}"
NOCOMPLEXITY="${NOCOMPLEXITY:-false}"
INSECURELDAP="${INSECURELDAP:-false}"
HOSTIP="${HOSTIP:-NONE}"

DOMAIN="${DOMAIN:-SAMDOM.LOCAL}"
LDOMAIN="${DOMAIN,,}"
UDOMAIN="${DOMAIN^^}"
REALM="${UDOMAIN%%.*}"

D2=()
IFS="." D2=(${DOMAIN})
D3=()
for P in "${D2[@]}" ; do
	D3+=("DC=${P^^}")
done

DC=""
for P in "${D3[@]}" ; do
	[ -n "${DC}" ] && DC="${DC},"
	DC="${DC}${P}"
done
unset D2 D3

TIMESTAMP="$(date +%Y%m%d-%H%M%S)"

backup_file()
{
	local FILE="${1}"
	[ -f "${FILE}" ] && mv -vf "${FILE}" "${FILE}.bak-${TIMESTAMP}"
	return 0
}

reset_data()
{
	say "Cleaning up any vestigial configurations"
	rm -rf "${SAMBA_STATE}"/* /var/log/samba/*
	tar -C / -xzf /samba-directory-templates.tar.gz
}

#
# This function will check to see if the instance can be considered
# "configured"
#
is_initialized()
{
	local CANDIDATES=()

	#
	# Common data
	#
	CANDIDATES+=("account_policy.tdb")
	CANDIDATES+=("netsamlogon_cache.tdb")
	CANDIDATES+=("registry.tdb")
	CANDIDATES+=("share_info.tdb")
	CANDIDATES+=("smbprofile.tdb")
	CANDIDATES+=("winbindd_cache.tdb")
	CANDIDATES+=("wins.ldb")

	#
	# Private data
	#
	CANDIDATES+=("private/dns_update_cache")
	CANDIDATES+=("private/dns_update_list")
	CANDIDATES+=("private/encrypted_secrets.key")
	CANDIDATES+=("private/hklm.ldb")
	CANDIDATES+=("private/idmap.ldb")
	CANDIDATES+=("private/kdc.conf")
	CANDIDATES+=("private/krb5.conf")
	CANDIDATES+=("private/netlogon_creds_cli.tdb")
	CANDIDATES+=("private/privilege.ldb")
	CANDIDATES+=("private/sam.ldb")
	CANDIDATES+=("private/schannel_store.tdb")
	CANDIDATES+=("private/secrets.keytab")
	CANDIDATES+=("private/secrets.ldb")
	CANDIDATES+=("private/secrets.tdb")
	CANDIDATES+=("private/share.ldb")
	CANDIDATES+=("private/spn_update_list")
	CANDIDATES+=("private/wins_config.ldb")

	#
	# SSL Certificates
	#
	CANDIDATES+=("private/tls/ca.pem")
	CANDIDATES+=("private/tls/cert.pem")
	CANDIDATES+=("private/tls/key.pem")

	#
	# Domain configurations
	#
	CANDIDATES+=("private/sam.ldb.d/metadata.tdb")
	CANDIDATES+=("private/sam.ldb.d/CN=CONFIGURATION,${DC}.ldb")
	CANDIDATES+=("private/sam.ldb.d/CN=SCHEMA,CN=CONFIGURATION,${DC}.ldb")
	CANDIDATES+=("private/sam.ldb.d/DC=DOMAINDNSZONES,${DC}.ldb")
	CANDIDATES+=("private/sam.ldb.d/DC=FORESTDNSZONES,${DC}.ldb")
	CANDIDATES+=("private/sam.ldb.d/${DC}.ldb")

	#
	# Check for the created databases
	#
	for C in "${CANDIDATES[@]}" ; do
		C="${SAMBA_STATE}/${C}"
		[ -e "${C}" ] || return 1
		[ -f "${C}" ] || return 1
		[ -r "${C}" ] || return 1
	done

	#
	# Domain Policies
	#
	local POLICY_DIR="${SAMBA_STATE}/sysvol/${DOMAIN,,}/Policies"
	[ -e "${POLICY_DIR}" ] || return 1
	[ -d "${POLICY_DIR}" ] || return 1
	[ -r "${POLICY_DIR}" ] || return 1
	[ -x "${POLICY_DIR}" ] || return 1

	#
	# Is this correct? Can a domain exist with no policies?
	#
	# TODO: disabled for now, as additional DCs don't seem to copy them over
	#local POLICIES=$(find "${POLICY_DIR}" -type f -iname GPT.INI | wc -l)
	#[ "${POLICIES}" -lt 1 ] && return 1

	#
	# We're fully configured, so we don't have to redo it
	#
	say "Domain data is already configured"
	return 0
}

cfg_mismatch()
{
	local L="${1}"
	local R1="${2}"
	local R2="${3}"

	say "The existing configurations are for the ${L} [${R1}]"
	say "This container instance has been configured for the ${L} [${R2}]"
	say "This mismatch is unresolvable - please manually clean out the existing data files and logs, or fix the configuration file"
}

configure_krb()
{
	#
	# Configure Kerberos
	#
	gucci < "${KRB_CONF}.template" > "${KRB_CONF}"

	return 0
}

render_smb_conf()
{
	#
	# Configure Samba
	#
	gucci < "${SMB_CONF}.template" > "${SMB_CONF}"

	return 0
}

configure_smb()
{
	is_initialized && render_smb_conf && return 0

	say "Configuring the domain"

	# Should we do this?
	reset_data

	# Set host ip option
	HOSTIP_OPTION=""
	[ "${HOSTIP}" != "NONE" ] && HOSTIP_OPTION="--host-ip=${HOSTIP}"

	# If the finished file isn't there, this is brand new, we're not just moving to a new container
	mv "${SMB_CONF}" "${SMB_CONF}.orig"

	PROVISION_FLAGS=()
	[ -n "${HOSTIP_OPTION}" ] && PROVISION_FLAGS+=("${HOSTIP_OPTION}")
	samba-tool domain provision --use-rfc2307 --domain="${REALM}" --backend-store=mdb --backend-store-size="${BACKEND_STORE_SIZE_GB}Gb" --realm="${UDOMAIN}" --server-role=dc --dns-backend=SAMBA_INTERNAL --adminpass="${DOMAINPASS}" "${PROVISION_FLAGS[@]}" || return 1
	if [[ ${NOCOMPLEXITY,,} == "true" ]]; then
		samba-tool domain passwordsettings set --complexity=off || return 1
		samba-tool domain passwordsettings set --history-length=0 || return 1
		samba-tool domain passwordsettings set --min-pwd-age=0 || return 1
		samba-tool domain passwordsettings set --max-pwd-age=0 || return 1
	fi

	render_smb_conf

	# Apply extra initializations, if needed
	local INIT_SCRIPTS="${INIT_DIR}/init.d"
	if [ -d "${INIT_SCRIPTS}" ] ; then
		say "Launching extra initializations from [${INIT_SCRIPTS}]..."
		cd "${INIT_SCRIPTS}" || exit 1
		while read script ; do
			say "\tLaunching the extra initializer script [${script}]..."
			if ! "$(readlink -f "${script}")" ; then
				say "\tError executing the initializer script [${script}] (rc=${?})"
				return 1
			fi
		done < <(find . -mindepth 1 -maxdepth 1 -type f -perm /u+x | sort | sed -e 's;^./;;g')
	fi

	say "Initialization complete"
	return ${?}
}

configure_k8s()
{
	local DNS_IP=""

	[ -v KUBERNETES_SERVICE_HOST ] || return 1

	# Lookup the DNS name kube-dns.kube-system.svc.cluster.local
	local CLUSTER_DOMAIN="$(get_cluster_domain)"
	local K8S_DNS="$(dig +short "kube-dns.kube-system.svc.${CLUSTER_DOMAIN}")"
	[ -n "${K8S_DNS}" ] || return 1
	echo "${K8S_DNS}"
}

# In case we're in Kubernetes
set_or_default DNSFORWARDER
[ -n "${DNSFORWARDER}" ] || DNSFORWARDER="$(configure_k8s)" || say "Kubernetes configurations not available"
export DNSFORWARDER

#
# Configure the components
#
configure_krb
if ! configure_smb ; then
	reset_data
	fail "Failed to configure Samba"
fi

#
# Download and deploy the required certificates
#
init_ssl

# We perform this validation b/c ACME processing may be turned off
if check_ssl &>/dev/null ; then
	# Now deploy the generated files
	LOCAL_CERT_HOME="${SAMBA_PRIVATE}/tls"
	ensure_dir "${LOCAL_CERT_HOME}"

	cp -vf "${SSL_DIR}/ca-chain.pem" "${LOCAL_CERT_HOME}/ca.pem"
	cp -vf "${SSL_DIR}/cert.pem" "${LOCAL_CERT_HOME}/cert.pem"
	chmod ug=r,o= "${LOCAL_CERT_HOME}"/*.pem

	# This file has to have stricter permissions
	cp -vf "${SSL_DIR}/cert.key" "${LOCAL_CERT_HOME}/key.pem"
	chmod u=rw,go= "${LOCAL_CERT_HOME}/key.pem"
fi

#
# Run the boot preparation scripts
#
if [ -d "${BOOT_DIR}" ] ; then
	say "Launching boot scripts from [${BOOT_DIR}]..."
	(
		cd "${BOOT_DIR}" || exit 1
		while read script ; do
			say "\tLaunching the boot script [${script}]..."
			RC=0
			( "./${script}" 2>&1 ) || RC=${?}
			if [ ${RC} -ne 0 ]  ; then
				say "\tError executing the boot script [${script}] (rc=${RC})"
				exit 1
			fi
		done < <(find . -mindepth 1 -maxdepth 1 -type f -readable -executable | sort | sed -e 's;^./;;g')
	)
fi

#
# Roll the log directory contents
#
LOG_DIR="/var/log/samba"
while read dummy ; do
	# We use this while loop as a trick to only execute this part
	# if there are older logs that need archival (i.e. don't do this
	# when there are no prior logs!)
	LOG_ARCHIVE_DIR="${LOG_DIR}/archive"

	# First off, find the last ${LOG_ARCHIVE_COUNT} archives, and
	# remove the oldest one, to both make disk space and ensure we
	# respect the configured limits
	if is_dir_readable "${LOG_ARCHIVE_DIR}" ; then
		DELETED="false"
		if [ ${LOG_ARCHIVE_COUNT} -ge 1 ] ; then
			while read DEL ; do
				as_boolean "${DELETED}" || doing "Clearing out the old archived logs"
				doing "Deleting ${DEL}"
				rm -rf "${DEL}" || { err "Failed to delete ${DEL}" ; continue ; }
				ok "Archive ${DEL} deleted!"
				DELETED="true"
			done < <(find "${LOG_ARCHIVE_DIR}" -mindepth 1 -maxdepth 1 -type d | sort | head -n -$(( LOG_ARCHIVE_COUNT - 1 )))
		else
			rm -rf "${LOG_ARCHIVE_DIR}" && DELETED="false" || err "Failed to remove the log archive directory"
		fi
		as_boolean "${DELETED}" && ok "Archive cleaned up"
	fi

	NEW_LOG_ARCHIVE="archive/$(date -u "+%Y%m%d-%H%M%SZ")"
	doing "Moving all prior logs in ${LOG_DIR} into ${LOG_DIR}/${NEW_LOG_ARCHIVE}"
	(
		set -euo pipefail
		cd "${LOG_DIR}"
		mkdir -p "${NEW_LOG_ARCHIVE}"
		find . -mindepth 1 -maxdepth 1 -not -name "archive" | sort | xargs mv -vf -t "${NEW_LOG_ARCHIVE}"
	) || fail "Failed to move the old Samba logs into the archive folder ${NEW_LOG_ARCHIVE}"

	ok "Logs relocated!"

	# We only care for one iteration..
	break
done < <(find "${LOG_DIR}" -maxdepth 1 -type f)

#
# Patching hosts file
#

DC_FQDN="${POD_NAME}.${DOMAIN}"
doing "Patching the hosts file for ${DC_FQDN} -> ${LDAP_SERVICE_HOST}"
echo "${LDAP_SERVICE_HOST}\t${DC_FQDN}" >> /etc/hosts
ok "Hosts file patched!"

#
# Let's go!!
#
execute /usr/sbin/samba -F
