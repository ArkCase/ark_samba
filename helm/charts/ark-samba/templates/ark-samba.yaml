apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "ark-samba.fullname" . }}
  labels:
    {{- include "ark-samba.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "ark-samba.selectorLabels" . | nindent 6 }}
  serviceName: {{ include "ark-samba.fullname" . }}
  template:
    metadata:
      annotations:
        {{- if .Values.service.ports.metrics }}
        # NB: Both these annotation values must be of type "string"
        prometheus.io/scrape: "true"
        prometheus.io/port: {{ .Values.service.ports.metrics.port | quote }}
        {{- end }}
        {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      labels:
        {{- include "ark-samba.labels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "ark-samba.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: samba
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            {{- if .Values.service.ports.ldaps }}
            - name: ldaps
              protocol: {{ .Values.service.ports.ldaps.protocol }}
              containerPort: {{ .Values.service.ports.ldaps.port }}
            {{- else }}
              {{- fail "The LDAPS port must be specified" }}
            {{- end }}
          readinessProbe:
            tcpSocket:
              port: {{ .Values.service.ports.ldaps.port }}
            initialDelaySeconds: {{ .Values.service.ports.ldaps.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.service.ports.ldaps.readinessProbe.periodSeconds }}
            failureThreshold: {{ .Values.service.ports.ldaps.readinessProbe.failureThreshold }}
            timeoutSeconds: {{ .Values.service.ports.ldaps.readinessProbe.timeoutSeconds }}
          livenessProbe:
            tcpSocket:
              port: {{ .Values.service.ports.ldaps.port }}
            initialDelaySeconds: {{ .Values.service.ports.ldaps.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.service.ports.ldaps.livenessProbe.periodSeconds }}
            failureThreshold: {{ .Values.service.ports.ldaps.livenessProbe.failureThreshold }}
            timeoutSeconds: {{ .Values.service.ports.ldaps.livenessProbe.timeoutSeconds }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
          {{- if .Values.persistence.enabled }}
            - name: data
              mountPath: {{ .Values.persistence.data.mountPath | quote }}
              {{- if .Values.persistence.data.subPath }}
              subPath: {{ .Values.persistence.subPath | quote }}
              {{- end }}
            - name: conf
              mountPath: {{ .Values.persistence.conf.mountPath | quote }}
              {{- if .Values.persistence.conf.subPath }}
              subPath: {{ .Values.persistence.conf.subPath | quote }}
              {{- end }}
            - name: logs
              mountPath: {{ .Values.persistence.logs.mountPath | quote }}
              {{- if .Values.persistence.logs.subPath }}
              subPath: {{ .Values.persistence.logs.subPath | quote }}
              {{- end }}
         {{- end }}
            - name: secrets
              mountPath: "/app/conf"
              readOnly: true
      volumes:
        {{- if .Values.persistence.enabled }}
        - name: data
          {{- if .Values.persistence.data.existingClaim }}
          persistentVolumeClaim:
            claimName: {{ .Values.persistence.data.existingClaim }}
          {{- else }}
          emptyDir: {}
          {{- end }}
        - name: conf
          {{- if .Values.persistence.conf.existingClaim }}
          persistentVolumeClaim:
            claimName: {{ .Values.persistence.conf.existingClaim }}
          {{- else }}
          emptyDir: {}
          {{- end }}
        - name: logs
          {{- if .Values.persistence.logs.existingClaim }}
          persistentVolumeClaim:
            claimName: {{ .Values.persistence.logs.existingClaim }}
          {{- else }}
          emptyDir: {}
          {{- end }}
        {{- end }}
        - name: secrets
          secret:
            secretName: {{ include "ark-samba.fullname" . }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
  {{- if and .Values.persistence.enabled (or (not .Values.persistence.data.existingClaim) (not .Values.persistence.conf.existingClaim) (not .Values.persistence.logs.existingClaim)) }}
  volumeClaimTemplates:
    - metadata:
        name: data
        annotations:
          {{- range $key, $value := .Values.persistence.data.annotations }}
            {{ $key }}: {{ $value | quote }}
          {{- end }}
      spec:
        accessModes:
          {{- range .Values.persistence.data.accessModes }}
          - {{ . | quote }}
          {{- end }}
        resources:
          requests:
            storage: {{ .Values.persistence.data.size | quote }}
        storageClassName: {{ .Values.persistence.data.storageClass | default "standard" }}
    - metadata:
        name: conf
        annotations:
          {{- range $key, $value := .Values.persistence.conf.annotations }}
            {{ $key }}: {{ $value | quote }}
          {{- end }}
      spec:
        accessModes:
          {{- range .Values.persistence.conf.accessModes }}
          - {{ . | quote }}
          {{- end }}
        resources:
          requests:
            storage: {{ .Values.persistence.conf.size | quote }}
        storageClassName: {{ .Values.persistence.conf.storageClass | default "standard" }}
    - metadata:
        name: logs
        annotations:
          {{- range $key, $value := .Values.persistence.logs.annotations }}
            {{ $key }}: {{ $value | quote }}
          {{- end }}
      spec:
        accessModes:
          {{- range .Values.persistence.logs.accessModes }}
          - {{ . | quote }}
          {{- end }}
        resources:
          requests:
            storage: {{ .Values.persistence.logs.size | quote }}
        storageClassName: {{ .Values.persistence.logs.storageClass | default "standard" }}
  {{- end }}
